name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-back:
    name: Build & Test Backend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        working-directory: back
        run: mvn clean verify

  build-front:
    name: Build & Test Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        working-directory: front
        run: yarn install

      - name: Run tests with coverage
        working-directory: front
        run: yarn test --watch=false --browsers=ChromeHeadless --code-coverage

  sonar-analysis:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: [build-back, build-front]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Install sonar-scanner globally
        run: npm install -g sonarqube-scanner

      - name: Run SonarCloud Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          # Analyse backend (Java)
          mvn -f back/pom.xml sonar:sonar \
            -Dsonar.projectKey=Shishifoxy_bobapp-ci-cd \
            -Dsonar.organization=shishifoxy \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
            -Dsonar.sources=src \
            -Dsonar.tests=src/test \
            -Dsonar.java.binaries=back/target/classes

          # Analyse frontend (Angular)
          sonar-scanner \
            -Dsonar.projectKey=Shishifoxy_bobapp-ci-cd \
            -Dsonar.organization=shishifoxy \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.sources=front/src \
            -Dsonar.tests=front/src \
            -Dsonar.test.inclusions=front/src/**/*.spec.ts \
            -Dsonar.typescript.lcov.reportPaths=front/coverage/lcov.info \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.login=$SONAR_TOKEN

  docker-publish:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: sonar-analysis

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build and push backend image
        run: |
          docker build -t shishifoxy1/bobapp-back ./back
          docker push shishifoxy1/bobapp-back

      - name: Build and push frontend image
        run: |
          docker build -t shishifoxy1/bobapp-front ./front
          docker push shishifoxy1/bobapp-front

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-publish]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Docker Login
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Pull and Run Docker Images
        run: |
          docker pull shishifoxy1/bobapp-back:latest
          docker pull shishifoxy1/bobapp-front:latest
          docker network create bobapp-network || true
          docker stop bobapp-back || true && docker rm bobapp-back || true
          docker stop bobapp-front || true && docker rm bobapp-front || true
          docker run -d --name bobapp-back --network bobapp-network -p 8080:8080 shishifoxy1/bobapp-back:latest
          docker run -d --name bobapp-front --network bobapp-network -p 8081:80 shishifoxy1/bobapp-front:latest
-Dsonar:
  java:
    binaries=back/target/classes: